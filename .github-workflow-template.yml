# GitHub Actions Workflow Template for Unity Build System
# Copy this file to your project's .github/workflows/ directory

name: Unity CI/CD Pipeline
on:
  push:
    branches:
      - androidBuild  # Triggers Android build only
      - iosBuild      # Triggers iOS build only
  release:
    types:
      - published   # Triggers both builds on releases
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build'
        required: true
        default: 'both'
        type: choice
        options:
        - ios
        - android
        - both
      deploy:
        description: 'Deploy after build'
        required: true
        default: 'true'
        type: boolean

env:
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

jobs:
  prepare:
    name: Prepare Build Configuration
    runs-on: ubuntu-latest
    outputs:
      build_ios: ${{ steps.determine.outputs.build_ios }}
      build_android: ${{ steps.determine.outputs.build_android }}
      deploy: ${{ steps.determine.outputs.deploy }}
      build_mode: ${{ steps.determine.outputs.build_mode }}
    
    steps:
      - name: Determine Build Configuration
        id: determine
        run: |
          # Determine what to build based on trigger
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PLATFORM="${{ github.event.inputs.platform }}"
            DEPLOY="${{ github.event.inputs.deploy }}"
          elif [ "${{ github.event_name }}" = "release" ]; then
            PLATFORM="both"
            DEPLOY="true"
          elif [ "${{ github.ref }}" = "refs/heads/androidBuild" ]; then
            PLATFORM="android"
            DEPLOY="true"
          elif [ "${{ github.ref }}" = "refs/heads/iosBuild" ]; then
            PLATFORM="ios"
            DEPLOY="true"
          else
            PLATFORM="both"
            DEPLOY="false"
          fi
          
          # Set build flags
          if [[ "$PLATFORM" == "ios" || "$PLATFORM" == "both" ]]; then
            echo "build_ios=true" >> $GITHUB_OUTPUT
          else
            echo "build_ios=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$PLATFORM" == "android" || "$PLATFORM" == "both" ]]; then
            echo "build_android=true" >> $GITHUB_OUTPUT
          else
            echo "build_android=false" >> $GITHUB_OUTPUT
          fi
          
          # Determine build mode
          if [ "${{ github.event_name }}" = "release" ]; then
            BUILD_MODE="release"
          else
            BUILD_MODE="development"
          fi
          
          echo "deploy=$DEPLOY" >> $GITHUB_OUTPUT
          echo "build_mode=$BUILD_MODE" >> $GITHUB_OUTPUT
          
          echo "Platform: $PLATFORM, Deploy: $DEPLOY, Mode: $BUILD_MODE"

  build_ios:
    name: Build iOS
    runs-on: macos-latest
    needs: prepare
    if: needs.prepare.outputs.build_ios == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-iOS-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-iOS-
            Library-
      
      - name: Setup Unity
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          buildName: iOS
          targetPlatform: iOS
          customParameters: -development
      
      - name: Upload iOS Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-${{ github.run_number }}
          path: build/iOS/
          retention-days: 1

  build_android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.build_android == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-Android-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-Android-
            Library-
      
      - name: Setup Android Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android.keystore
          
      - name: Setup Unity
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          buildName: Android
          targetPlatform: Android
          androidAppBundle: true
          androidKeystoreName: android.keystore
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEY_ALIAS }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEY_PASS }}
      
      - name: Upload Android Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-build-${{ github.run_number }}
          path: build/Android/
          retention-days: 1

  deploy_ios:
    name: Deploy iOS to TestFlight
    runs-on: macos-latest
    needs: [prepare, build_ios]
    if: needs.prepare.outputs.deploy == 'true' && needs.prepare.outputs.build_ios == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Download iOS Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-build-${{ github.run_number }}
          path: build/
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2
          bundler-cache: true
      
      - name: Setup Environment Variables
        run: |
          echo "APPLE_DEVELOPER_EMAIL=${{ secrets.APPLE_DEVELOPER_EMAIL }}" >> $GITHUB_ENV
          echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}" >> $GITHUB_ENV
          echo "APPLE_TEAM_NAME=${{ secrets.APPLE_TEAM_NAME }}" >> $GITHUB_ENV
          echo "APPSTORE_KEY_ID=${{ secrets.APPSTORE_KEY_ID }}" >> $GITHUB_ENV
          echo "APPSTORE_ISSUER_ID=${{ secrets.APPSTORE_ISSUER_ID }}" >> $GITHUB_ENV
          echo "APPSTORE_P8_CONTENT=${{ secrets.APPSTORE_P8_CONTENT }}" >> $GITHUB_ENV
          echo "MATCH_PASSWORD=${{ secrets.MATCH_PASSWORD }}" >> $GITHUB_ENV
          echo "REPO_TOKEN=${{ secrets.REPO_TOKEN }}" >> $GITHUB_ENV
      
      - name: Deploy to TestFlight
        run: ./Scripts/iosDeploy.sh

  deploy_android:
    name: Deploy Android to Play Store
    runs-on: macos-latest
    needs: [prepare, build_android]
    if: needs.prepare.outputs.deploy == 'true' && needs.prepare.outputs.build_android == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Download Android Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-build-${{ github.run_number }}
          path: build/Android/
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2
          bundler-cache: true
      
      - name: Setup Environment Variables
        run: |
          echo "GOOGLE_PLAY_SERVICE_ACCOUNT_JSON=${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" >> $GITHUB_ENV
      
      - name: Deploy to Play Store
        run: ./Scripts/androidDeploy.sh